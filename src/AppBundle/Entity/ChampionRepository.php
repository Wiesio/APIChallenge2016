<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ChampionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChampionRepository extends EntityRepository
{
    /**
     * @param \DateTime|null $from
     * @param int $limit
     * @return Champion[]
     */
    public function getMostPopularBans(\DateTime $from = null, $limit = 10) {
        if(!$from) {
            $from = new \DateTime();
            $from->sub(new \DateInterval('P7D'));
        }

        $queryBuilder = $this->createQueryBuilder('champion');
        $queryBuilder->select('champion, COUNT(bannedChampion.id) AS HIDDEN banCount')
            ->join('champion.bannedChampions', 'bannedChampion')
            ->leftJoin('bannedChampion.team', 'team')
            ->leftJoin('team.matchDetail', 'matchDetail')
            ->where('matchDetail.matchCreation >= :from')
            ->setParameter('from', $from)
            ->groupBy('champion.key')
            ->orderBy('banCount', 'DESC')
            ->setMaxResults($limit);
        $query = $queryBuilder->getQuery();

        return $query->getResult();
    }

    /**
     * @param string $region
     * @param array $banIds
     * @return Champion[]
     */
    public function getExcept($region, $banIds) {
        $queryBuilder = $this->createQueryBuilder('champion');
        $queryBuilder->select('champion')
            ->where('champion.region = :region')
            ->setParameter('region', $region)
            ->orderBy('champion.name', 'ASC');
        if($banIds) {
            $queryBuilder->andWhere('champion.id NOT IN (:banIds)')
                ->setParameter('banIds', $banIds);
        }
        $query = $queryBuilder->getQuery();

        return $query->getResult();
    }
}
